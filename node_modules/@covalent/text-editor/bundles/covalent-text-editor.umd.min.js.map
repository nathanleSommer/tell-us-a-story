{
  "version": 3,
  "file": "covalent-text-editor.umd.min.js",
  "sources": [
    "ng://@covalent/text-editor/out/text-editor.component.ts",
    "ng://@covalent/text-editor/out/text-editor.module.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, Output, EventEmitter, OnInit, AfterViewInit, ViewChild,\n         ElementRef, forwardRef, ViewEncapsulation, NgZone, Inject } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport * as SimpleMDE from 'simplemde';\n// using 'import * as' not working in Angular 5 for some reason\n/* tslint:disable-next-line */\nlet SimpleMDECss = require('simplemde/dist/simplemde.min.css');\n\nconst noop: any = () => {\n  // empty method\n};\n\n@Component({\n  selector: 'td-text-editor',\n  template: `<div>\n<textarea #simplemde></textarea>\n</div>\n`,\n  styles: [``],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TdTextEditorComponent),\n    multi: true,\n  }],\n})\nexport class TdTextEditorComponent implements AfterViewInit, ControlValueAccessor {\n\n  private _value: string = '';\n  private _simpleMDE: any;\n  private _fromEditor: boolean = false;\n\n  @ViewChild('simplemde') textarea: ElementRef;\n  @Input() options: any = {};\n\n  constructor(private _elementRef: ElementRef,\n              private _zone: NgZone,\n              private _domSanitizer: DomSanitizer,\n              @Inject(DOCUMENT) private _document: any) {}\n\n  /* tslint:disable-next-line */\n  propagateChange = (_: any) => {};\n  onTouched = () => noop;\n\n  /**\n   * value?: string\n   * Value in the Editor after async getEditorContent was called\n   */\n  @Input('value')\n  set value(value: string) {\n    this._value = value;\n    if (this._simpleMDE) {\n      if (!this._fromEditor) {\n        this._simpleMDE.value(value);\n      }\n      this.propagateChange(this._value);\n      this._fromEditor = false;\n      this._zone.run(() => this._value = value);\n    }\n  }\n\n  get value(): string {\n      return this._value;\n  }\n\n  get simpleMDE(): any {\n    return this._simpleMDE;\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: any): void {\n    this.value = (!value) ? '' : value;\n  }\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  ngAfterViewInit(): void {\n    if (this._document) {\n      let styleElement: HTMLElement = this._document.createElement('style');\n      styleElement.innerHTML = <string>this._domSanitizer.bypassSecurityTrustHtml(String(SimpleMDECss));\n      this._document.head.appendChild(styleElement);\n    }\n    this.options.element = this.textarea.nativeElement;\n    this._simpleMDE = new SimpleMDE(this.options);\n    this._simpleMDE.value(this.value);\n    this._simpleMDE.codemirror.on('change', () => {\n      this._fromEditor = true;\n      this.writeValue(this._simpleMDE.value());\n    });\n  }\n\n  /* Wrapped function provided by SimpleMDE */\n\n  isPreviewActive(): boolean {\n    return this._simpleMDE.isPreviewActive();\n  }\n\n  isSideBySideActive(): boolean {\n    return this._simpleMDE.isSideBySideActive();\n  }\n\n  isFullscreenActive(): boolean {\n    return this._simpleMDE.isFullscreenActive();\n  }\n\n  clearAutosavedValue(): void {\n    this._simpleMDE.clearAutosavedValue();\n  }\n\n  toTextArea(): void {\n    this._simpleMDE.toTextArea();\n  }\n\n  toggleBold(): void {\n    this._simpleMDE.toggleBold();\n  }\n\n  toggleItalic(): void {\n    this._simpleMDE.toggleItalic();\n  }\n\n  toggleStrikethrough(): void {\n    this._simpleMDE.toggleStrikethrough();\n  }\n\n  toggleHeadingSmaller(): void {\n    this._simpleMDE.toggleHeadingSmaller();\n  }\n\n  toggleHeadingBigger(): void {\n    this._simpleMDE.toggleHeadingBigger();\n  }\n\n  toggleHeading1(): void {\n    this._simpleMDE.toggleHeading1();\n  }\n\n  toggleHeading2(): void {\n    this._simpleMDE.toggleHeading2();\n  }\n\n  toggleHeading3(): void {\n    this._simpleMDE.toggleHeading3();\n  }\n\n  toggleCodeBlock(): void {\n    this._simpleMDE.toggleCodeBlock();\n  }\n\n  toggleBlockquote(): void {\n    this._simpleMDE.toggleBlockquote();\n  }\n\n  toggleUnorderedList(): void {\n    this._simpleMDE.toggleUnorderedList();\n  }\n\n  toggleOrderedList(): void {\n    this._simpleMDE.toggleOrderedList();\n  }\n\n  cleanBlock(): void {\n    this._simpleMDE.cleanBlock();\n  }\n\n  drawLink(): void {\n    this._simpleMDE.drawLink();\n  }\n\n  drawImage(): void {\n    this._simpleMDE.drawImage();\n  }\n\n  drawTable(): void {\n    this._simpleMDE.drawTable();\n  }\n\n  drawHorizontalRule(): void {\n    this._simpleMDE.drawHorizontalRule();\n  }\n\n  togglePreview(): void {\n    this._simpleMDE.togglePreview();\n  }\n\n  toggleSideBySide(): void {\n    this._simpleMDE.toggleSideBySide();\n  }\n\n  toggleFullScreen(): void {\n    this._simpleMDE.toggleFullScreen();\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { TdTextEditorComponent } from './text-editor.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TdTextEditorComponent,\n  ],\n  exports: [\n    TdTextEditorComponent,\n  ],\n  entryComponents: [ ],\n  bootstrap: [ TdTextEditorComponent ],\n})\nexport class CovalentTextEditorModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CovalentTextEditorModule,\n      providers: [ ],\n    };\n  }\n}\n"
  ],
  "names": [
    "noop",
    "TdTextEditorComponent",
    "this",
    "_elementRef",
    "_zone",
    "_domSanitizer",
    "_document",
    "_value",
    "_fromEditor",
    "options",
    "onTouched",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "value",
    "_this",
    "_simpleMDE",
    "run",
    "enumerable",
    "configurable",
    "writeValue",
    "registerOnChange",
    "fn",
    "propagateChange",
    "registerOnTouched",
    "ngAfterViewInit",
    "styleElement",
    "createElement",
    "innerHTML",
    "bypassSecurityTrustHtml",
    "String",
    "SimpleMDECss",
    "head",
    "appendChild",
    "codemirror",
    "on",
    "toggleFullScreen",
    "decorators",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "useExisting",
    "forwardRef",
    "multi",
    "ctorParameters",
    "ElementRef",
    "NgZone",
    "Input",
    "CovalentTextEditorModule",
    "forRoot",
    "ngModule",
    "providers",
    "NgModule",
    "imports",
    "CommonModule"
  ],
  "mappings": "ukBAUIA,EAAJ,aAIAC,EAAA,+BAwBAC,KAAAC,YAA6CA,EAAvBD,KAAtBE,MAAAA,EACsBF,KAAtBG,cAAAA,EACsBH,KAAtBI,UAAAA,EACwCJ,KAAxCK,OAAiD,GAVjDL,KAAAM,aAAA,EAEAN,KAAAO,8CAWAP,KAAAQ,UAAA,WAAA,OAAAV,GArBA,OAkBAW,OAAAC,eAAAX,EAAAY,UAAA,4CAiBAC,IAAA,SAAAC,GACM,IAAIC,EAAVd,KACMA,KAAKK,OAASQ,EACpBb,KAAAe,0FAGAf,KAAAM,aAAA,EACAN,KAAAE,MAAyBc,IAAzB,WAAA,OAAAF,EAAAT,OAAAQ,sCAIAJ,OAAAC,eAAAX,EAAAY,UAAA,oDAMAM,YAAuB,EACnBC,cAAc,IAGlBnB,EAAAY,UAAAQ,WAAA,SAAAN,GACAb,KAAAa,MAAAA,GAAA,IAEAd,EAAAY,UAAAS,iBAAA,SAAAC,GACArB,KAAAsB,gBAAAD,GAIAtB,EAAAY,UAAAY,kBAAA,SAAAF,GACArB,KAAAQ,UAAmBa,GAKnBtB,EAAAY,UAAAa,gBAAA,WACI,IAAIV,EAARd,KACA,GAAMA,KAAKI,UAAW,CAChB,IAAqBqB,EAA3BzB,KAA+CI,UAA/CsB,cAAA,SACAD,EAAAE,UAAA3B,KAAAG,cAAAyB,wBAAAC,OAAAC,IACA9B,KAAAI,UAAA2B,KAAAC,YAAAP,wFAIAzB,KAAAe,WAAAF,MAAAb,KAAAa,OACIb,KAAJe,WAAAkB,WAAAC,GAAA,SAA4C,WAC5CpB,EAAAR,aAAA,q0DAnFAN,KAAAe,WAAAoB,oBAEApC,EATA,GAWAA,EAAAqC,aACAC,KAAAC,EAAAA,UAAAC,OACAC,SAAA,iBACAC,SAAA,wGA3BAC,YAAAC,EAAAA,WAAA,WAAA,OAAA5C,IAAA6C,OAAA,QAkCA7C,EAAA8C,eAAA,WAAA,QACAR,KAAAS,EAAAA,aAeAT,KAAAU,EAAAA,4LCnDAlC,QAAAwB,KAAAW,EAAAA,MAAAT,MAAA,YAsBA,IAAAU,EAAwC,WACxC,SAAAA,KAXA,OANAA,EAAUC,QAAV,WACA,OACAC,SAAAF,EACAG,eAGAH,EAUA,GARAA,EAAAb,aACAC,KAAAgB,EAAAA,SAAAd,OACEe,SACFC,EAAAA"
}
